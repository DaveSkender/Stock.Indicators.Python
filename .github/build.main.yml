# MAIN BUILD
trigger:
  - main

pr:
  - main

jobs:
  - job: Build
    variables:
      ImageName: "ubuntu-latest"
      PythonVersion: "3.8"

    pool:
      name: Azure Pipelines
      vmImage: "$(imageName)"

    steps:
      - task: UseDotNet@2
        displayName: Use .NET 6.0
        inputs:
          packageType: 'sdk'
          version: '6.0.x'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(PythonVersion)"

      - task: gitversion/setup@0
        displayName: Use GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: Get GitVersion
        inputs:
          useConfigFile: true
          configFilePath: 'gitversion.yml'

      - powershell: |
          echo "Current version: $(GitVersion.SemVer)"
        displayName: Shows GitVersion

      - script: |
          python -m pip install --upgrade pip setuptools wheel build
        displayName: "Install dependencies"

      - task: CmdLine@2
        displayName: "Build"
        inputs:
          script: "python setup.py sdist bdist_wheel semver:$(GitVersion.SemVer)"
          workingDirectory: $(Build.SourcesDirectory)
        #condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

      - task: CopyFiles@2
        displayName: "Stage artifacts"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)/dist"
          Contents: "**"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"
          CleanTargetFolder: true
          OverWrite: true
          flattenFolders: true

      - task: PublishPipelineArtifact@1
        displayName: "Save artifacts"
        inputs:
          targetPath: "$(Build.ArtifactStagingDirectory)"
          artifact: "packages"
          publishLocation: "pipeline"

  - job: Test
    variables:
      PythonVersion: "3.8"

    strategy:
      matrix:
        Windows-Python37:
          imageName: windows-latest
          python.version: "3.7"
        Windows-Python38:
          imageName: windows-latest
          python.version: "3.8"
        Windows-Python39:
          imageName: windows-latest
          python.version: "3.9"
        Windows-Python310:
          imageName: windows-latest
          python.version: "3.10"
        Linux-Python37:
          imageName: ubuntu-latest
          python.version: "3.7"
        Linux-Python38:
          imageName: ubuntu-latest
          python.version: "3.8"
        Linux-Python39:
          imageName: ubuntu-latest
          python.version: "3.9"
        Linux-Python310:
          imageName: ubuntu-latest
          python.version: "3.10"
        MacOS-Python37:
          imageName: macOS-latest
          python.version: "3.7"
        MacOS-Python38:
          imageName: macOS-latest
          python.version: "3.8"
        MacOS-Python39:
          imageName: macOS-latest
          python.version: "3.9"
        MacOS-Python310:
          imageName: macOS-latest
          python.version: "3.10"

    pool:
      name: Azure Pipelines
      vmImage: "$(imageName)"

    steps:
      - task: UseDotNet@2
        displayName: Use .NET 6.0
        inputs:
          packageType: 'sdk'
          version: '6.0.x'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"

      - bash: |
          # echo $(Agent.OS)
          # if [ '$(Agent.OS)' = 'Darwin' ]
          # then
          #   # Setup Miniconda environment
          #   sudo chown -R $USER $CONDA
          #   conda create --yes --quiet --name myEnvironment

          #   # Official documentation is out of date.
          #   # This is just workaround to activate conda environment.
          #   # See https://github.com/MicrosoftDocs/azure-devops-docs/issues/3812.
          #   source $CONDA/bin/activate $CONDA/envs/myEnvironment
          #   conda install --yes --quiet --name myEnvironment -c conda-forge pythonnet
          # fi

          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
        workingDirectory: $(Build.SourcesDirectory)
        displayName: "Install dependencies"

      - bash: |
          # if [ '$(Agent.OS)' = 'Darwin' ]
          # then
          #   # Activate conda environment
          #   # Official documentation is out of date.
          #   # This is just workaround to activate conda environment.
          #   # See https://github.com/MicrosoftDocs/azure-devops-docs/issues/3812.
          #   source $CONDA/bin/activate $CONDA/envs/myEnvironment
          # fi

          pip install -r requirements-test.txt
          pytest -vr A tests --junitxml=$(Build.SourcesDirectory)/tests/test-results.xml --cov=$(Build.SourcesDirectory)/stock_indicators --cov-report xml:$(Build.SourcesDirectory)/tests/coverage.xml
        workingDirectory: $(Build.SourcesDirectory)
        displayName: "Run all tests"

      - task: PublishTestResults@2
        displayName: "Publish test results"
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: "$(Build.SourcesDirectory)/tests/test-results.xml"
          testRunTitle: "Python $(python.version) Tests"

      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(Build.SourcesDirectory)/tests/coverage.xml"
