# MAIN BUILD

trigger:
  - main

pr:
  - main

jobs:
  - job: Build
    variables:
      PythonWrapperBaseDirectory: "$(Build.SourcesDirectory)"
      ImageName: "ubuntu-latest"
      DotNetVersion: "netstandard2.0"
      PythonVersion: "3.8"

    pool:
      name: Azure Pipelines
      vmImage: "$(imageName)"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(PythonVersion)"

      # - task: UseDotNet@2
      #   displayName: "use .NET SDK 5.0.x"
      #   inputs:
      #     version: 5.0.x

      # - task: DotNetCoreCLI@2
      #   displayName: "use GitVersion"
      #   inputs:
      #     command: custom
      #     custom: tool
      #     arguments: "install -g gitversion.tool --version 5.6.11"

      # - task: DotNetCoreCLI@2
      #   displayName: "get version number"
      #   inputs:
      #     command: custom
      #     custom: gitversion
      #     arguments: "/output buildserver"

      - task: DownloadPipelineArtifact@2
        displayName: "Fetch NuGet DLL"
        inputs:
          source: specific
          project: 5123ca47-74f2-4d67-a5d4-c4d90b8d670a
          pipeline: 21
          runVersion: latestFromBranch
          runBranch: refs/heads/main
          artifact: packages
          patterns: "*.nupkg"

      - task: ExtractFiles@1
        displayName: "Extract DLL from NuGet"
        inputs:
          archiveFilePatterns: "$(Pipeline.Workspace)/*.nupkg"
          destinationFolder: "$(Build.SourcesDirectory)/unpacked"
          cleanDestinationFolder: true
          overwriteExistingFiles: true

      - task: CopyFiles@2
        displayName: "Replace DLL"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)/unpacked/lib/$(DotNetVersion)"
          Contents: "*.dll"
          TargetFolder: "$(PythonWrapperBaseDirectory)/stock_indicators/_cslib/lib"
          CleanTargetFolder: true
          OverWrite: true
          flattenFolders: true
      
      - task: gitversion/setup@0
        # condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        displayName: Setup GitVersion
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        # condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        displayName: Calculate GitVersion
        inputs:
          useConfigFile: true
          configFilePath: 'gitversion.yml'
      
      - powershell: |
          echo "Current version: $(GitVersion.SemVer)"
        displayName: Shows currently compiling version
        # condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

      - script: |
          python -m pip install --upgrade pip setuptools wheel build
        displayName: "Install dependencies"

      - task: CmdLine@2
        displayName: "Build"
        inputs:
          script: "python setup.py $(GitVersion.SemVer) sdist bdist_wheel"
          workingDirectory: $(PythonWrapperBaseDirectory)
        #condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

      - task: CopyFiles@2
        displayName: "Stage artifacts"
        inputs:
          SourceFolder: "$(PythonWrapperBaseDirectory)/dist"
          Contents: "**"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"
          CleanTargetFolder: true
          OverWrite: true
          flattenFolders: true

      - task: PublishPipelineArtifact@1
        displayName: "Save artifacts"
        inputs:
          targetPath: "$(Build.ArtifactStagingDirectory)"
          artifact: "packages"
          publishLocation: "pipeline"

  - job: Test
    variables:
      PythonWrapperBaseDirectory: "$(Build.SourcesDirectory)"
      DotNetVersion: "netstandard2.0"

    strategy:
      matrix:
        Windows-Python38:
          imageName: windows-latest
          python.version: "3.8"
        # Windows-Python39:
        #   imageName: windows-latest
        #   python.version: "3.9"
        Linux-Python38:
          imageName: ubuntu-latest
          python.version: "3.8"
        # Linux-Python39:
        #   imageName: ubuntu-latest
        #   python.version: "3.9"
        MacOS-Python38:
          imageName: macOS-latest
          python.version: "3.8"
        # MacOS-Python39:
        #   imageName: macOS-latest
        #   python.version: "3.9"

    pool:
      name: Azure Pipelines
      vmImage: "$(imageName)"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"

      - task: DownloadPipelineArtifact@2
        displayName: "Fetch NuGet DLL"
        inputs:
          source: specific
          project: 5123ca47-74f2-4d67-a5d4-c4d90b8d670a
          pipeline: 21
          runVersion: latestFromBranch
          runBranch: refs/heads/main
          artifact: packages
          patterns: "*.nupkg"

      - task: ExtractFiles@1
        displayName: "Extract Nuget DLL"
        inputs:
          archiveFilePatterns: "$(Pipeline.Workspace)/*.nupkg"
          destinationFolder: "$(Build.SourcesDirectory)/unpacked"
          cleanDestinationFolder: true
          overwriteExistingFiles: true

      - task: CopyFiles@2
        displayName: "Replace DLL"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)/unpacked/lib/$(DotNetVersion)"
          Contents: "*.dll"
          TargetFolder: "$(PythonWrapperBaseDirectory)/stock_indicators/_cslib/lib"
          CleanTargetFolder: true
          OverWrite: true
          flattenFolders: true

      - bash: |
          echo $(Agent.OS)
          if [ '$(Agent.OS)' = 'Darwin' ]
          then
            # Setup Miniconda environment
            sudo chown -R $USER $CONDA
            conda create --yes --quiet --name myEnvironment

            # Official documentation is out of date.
            # This is just workaround to activate conda environment.
            # See https://github.com/MicrosoftDocs/azure-devops-docs/issues/3812.
            source $CONDA/bin/activate $CONDA/envs/myEnvironment
            conda install --yes --quiet --name myEnvironment -c conda-forge pythonnet
          fi

          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
        workingDirectory: $(PythonWrapperBaseDirectory)
        displayName: "Install dependencies"

      - bash: |
          if [ '$(Agent.OS)' = 'Darwin' ]
          then
            # Activate conda environment
            # Official documentation is out of date.
            # This is just workaround to activate conda environment.
            # See https://github.com/MicrosoftDocs/azure-devops-docs/issues/3812.
            source $CONDA/bin/activate $CONDA/envs/myEnvironment
            
          fi

          pip install -r requirements-test.txt
          pytest -vr A --junitxml=$(PythonWrapperBaseDirectory)/tests/test-results.xml --cov=$(PythonWrapperBaseDirectory)/stock_indicators --cov-report xml:$(PythonWrapperBaseDirectory)/tests/coverage.xml
        workingDirectory: $(PythonWrapperBaseDirectory)
        displayName: "Run all tests"

      - task: PublishTestResults@2
        displayName: "Publish test results"
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: "$(PythonWrapperBaseDirectory)/tests/test-results.xml"
          testRunTitle: "Python $(python.version) Tests"

      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage"
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(PythonWrapperBaseDirectory)/tests/coverage.xml"
